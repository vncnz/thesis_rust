use std::collections::HashMap;
mod common;
use common::{create_node, get_from_map, nodes_relationship, print_hash_map, print_path_to_root_compressed, print_path_to_root_full, tree_prune, TreeNode};
use memory_stats::memory_stats;

/* fn read_file (path: &str) {
    fs::read_to_string(path).expect("Unable to read file");
}
fn write_file (path: &str, data: &str) {
    fs::write(path, data).expect("Unable to write file");
} */
/* fn write_json () {
    serde_json::to_writer(file, hashmap)?;
} */

// static VERBOSE_MODE: bool = false;

fn print_alignment(max_points_pos: usize, map: &HashMap<usize, TreeNode>, seq1: &str, seq2: &str, m1: usize) {
    let seq1v: Vec<char> = seq1.chars().collect();
    let seq2v: Vec<char> = seq2.chars().collect();
    let end_pos = (seq1v.len() + 1) * (seq2v.len() + 1) - 1;
    // println!("end pos is {}", end_pos);
    let mut a: String = "".to_owned();
    let mut b: String = "".to_owned();
    // let mut cnode = &map[&max_points_pos];
    let mut cnode = &TreeNode { pos: end_pos, parent: max_points_pos, children: [].to_vec(), depth: 0 };
    if end_pos == max_points_pos {
        cnode = get_from_map(map, &end_pos);
    }
    // println!("print_alignment {:?}", cnode);
    while cnode.parent != cnode.pos {
        // println!("print_alignment {:?}", cnode);
        let mut p = cnode.pos;
        while p > cnode.parent {
            let r = nodes_relationship(p, cnode.parent, m1);
            assert!(r.v || r.h || r.d, "Wrong relationship between {} and {}", p, cnode.parent);
            if r.v {
                p = p - m1;
                a.insert(0, '-');
                b.insert(0, seq2v[(p / m1) as usize]);
            }
            else if r.h {
                p = p - 1;
                a.insert(0, seq1v[p % m1]);
                b.insert(0, '-');
            }
            else if r.d {
                p = p - m1 - 1;
                a.insert(0, seq1v[p % m1]);
                b.insert(0, seq2v[(p / m1) as usize]);
            }
        }
        cnode = get_from_map(map, &cnode.parent); // &map[&cnode.parent];
        println!("{:?}", &cnode);
    }
    println!("{}", a);
    println!("{}", b);
}

/* fn tree_prune(w: usize, tree: &mut HashMap<usize, TreeNode>) {
    println!("Pruning tree starting at {}", w);
    let n = tree.get_mut(&w).unwrap();
    if n.children.len() == 0 {
        println!("Deleting a node {}", n.pos);
        let p = tree.get_mut(&n.parent).unwrap();
        if let Some(pos) = p.children.iter().position(|x| *x == n.pos) {
            p.children.remove(pos);
        }
        tree.remove(&n.pos);
        println!("Element {} dropped", n.pos);
    }
} */

fn create_concatenated_alternatives_string (seq: &str) -> (String, HashMap<usize, Vec<usize>>) {
    let variants = HashMap::from([
        ('W', vec!["TTT", "CC"])
    ]);
    let mut faked: String = String::new();
    let mut dependences: HashMap<usize, Vec<usize>> = HashMap::new();
    // let mut last = -1;

    for c in seq.chars() {
        match c {
            'A' | 'C' | 'G' | 'T' => faked.push(c),
            _ => {
                let start = faked.len() - 1;
                let mut derivates = Vec::new();
                for i in 0..variants[&c].len() {
                    faked.push_str(variants[&c][i]);
                    derivates.push(faked.len() - 1);
                    dependences.insert(faked.len() - 1, [start].to_vec());
                }
                let end = faked.len();
                derivates.insert(0, start);
                dependences.insert(end, derivates);
                // println!("start: {}   end: {}   derivates: {:?}", start, end, derivates);
            }
        };
    }
    println!("dependences: {:?}", dependences);
    (faked, dependences)
}

fn two_rows_alignment(seq1: &str, seq: &str, match_score: i32, mismatch: i32, gap: i32) -> (i32, usize) {

    let (seqq, dependences) = create_concatenated_alternatives_string(seq);
    println!("{}, {:?}", seq, dependences);
    let seq2 = &seqq;

    let m = seq1.len();
    let n = seq2.len();
    let m1 = m + 1;
    let n1 = n + 1;

    // Inizializza la tabella DP. Si tratta delle due righe che nella versione py erano chiamate row_a e row_b
    let mut dp = vec![vec![0; n + 1]; 2];

    // Inizializza il punteggio massimo, la sua posizione, il relativo TreeNode
    let mut max_score = 0;
    // let mut max_node: TreeNode = TreeNode { pos: 0, parent: 0, children: [0,0,0], depth: 0};
    let mut max_pos = 0;

    // Inizializza il dict
    let mut tree = HashMap::with_capacity(n * 2);
    // create_node(0, 0, &mut tree);
    let node = TreeNode {
        pos: 0,
        parent: 0,
        children: Vec::new(),
        depth: 0
    };
    tree.insert(node.pos, node);

    // Inizializza la prima riga
    for i in 1..m1 {
        dp[0][i] = std::cmp::max(0, dp[0][i - 1] + gap);
        create_node(i, i - 1, &mut tree);
    }

    // Riempie la tabella DP e traccia il punteggio massimo
    let mut ratio: f64 = 100.0;
    for j in 1..n1 {
        ratio = ((100 * tree.len() / (m1*j)) as f64).round();
        if j % std::cmp::max(1 as usize, (n/20) as usize) == 0 {
            println!("\nRow j={} tree is {}%", j, ratio);

            if let Some(usage) = memory_stats() {
                println!("Current physical memory usage: {}", usage.physical_mem);
                println!("Current virtual memory usage: {}", usage.virtual_mem);
            } else {
                println!("Couldn't get the current memory usage :(");
            }
        }
        dp[1][0] = std::cmp::max(0, dp[0][0] + gap);
        create_node(j*m1, (j - 1)*m1, &mut tree);
        if j > 1 {
            tree_prune((j-1)*m1 - 1, &mut tree, &max_pos, &m1); // qui prune dell'ultimo elemento della riga appena abbandonata
        }

        for i in 1..m1 {
            // if j == 27 { println!("\nRow i={}", i); }
            let w = j*m1 + i;
            // println!("w={} m1={} j={} i={}", w, &m1, &j, &i);
            let match_mismatch_delta_points = dp[0][i - 1]
                + if seq1.as_bytes()[i - 1] == seq2.as_bytes()[j - 1] { match_score }
                  else { mismatch };

            let delete = dp[0][i] + gap;
            let insert = dp[1][i - 1] + gap;

            if match_mismatch_delta_points > delete && match_mismatch_delta_points > insert {
                dp[1][i] = match_mismatch_delta_points;
                create_node(w, w - m1 - 1, &mut tree);
                // L'elemento in diagonale ovviamente non è leaf ma per la versione con percorsi compressi ci serve comunque valutarla?
                tree_prune(w - m1 - 1, &mut tree, &max_pos, &m1);
            } else if delete > insert { // * Preferiamo il movimento orizzontale!
                dp[1][i] = delete;
                create_node(w, w - m1, &mut tree);
                tree_prune(w - m1 - 1, &mut tree, &max_pos, &m1); // prune dell'elemento in diagonale
            } else {
                dp[1][i] = insert;
                create_node(w, w - 1, &mut tree);
                tree_prune(w - m1 - 1, &mut tree, &max_pos, &m1); // prune dell'elemento in diagonale
            }

            // dp[1][j] = std::cmp::max(match_mismatch_delta_points, std::cmp::max(delete, std::cmp::max(insert, 0)));

            // Traccia il punteggio massimo e la sua posizione
        }
        if dp[1][m1-1] > max_score {
            if max_pos > 0 && max_pos < (j-1)*m1 - 1 { tree_prune(max_pos, &mut tree, &((j+1)*m1 -1), &m1); }
            // Occhio ad eliminarlo solo se non ha figli, tree_node al momento non fa questo controllo
            max_score = dp[1][m1-1];
            max_pos = (j+1)*m1 -1;
        }
        // if j < 8 { print_hash_map(&tree); }

        // if j < 10 { print_hash_map(&tree); }

        // Scambia le righe. In realtà mi interessa solo che la seconda diventi prima, la nuova seconda la sovrascrivo senza guardarla. In futuro, quando avrò le de-strings, dovrà essere più elaborato
        // dp[0].clone_from_slice(&dp[1]);
        dp.swap(0, 1);
    }

    println!("Matrix size {} x {} = {}", m1, n1, m1*n1);
    println!("Tree size {} nodes ({}% of matrix size)", tree.len(), ratio);
    println!("m is {} and m^2 is {}. n+m is {}", m, m*m, n+m);

    if tree.len() < 170 {
        println!("\nFull schema saved in memory");
        print_hash_map(&tree);
        println!("\nPath from best score to root (w={})", max_pos);
        print_path_to_root_full(max_pos, &tree);
    } else if tree.len() < 1_000 {
        println!("\nFull schema saved in memory too big to be printed, sorry");
        println!("\nPath from best score to root (w={})", max_pos);
        print_path_to_root_compressed(max_pos, &tree);
    } else {
        println!("\nFull schema saved in memory too big to be printed, sorry");
        println!("\nPath from best score to root (w={})", max_pos);
    }
    print_alignment(max_pos, &tree, seq1, seq2, m1);

    (max_score, max_pos)
}

fn main() {

    let (score, max_pos) = two_rows_alignment(&X[0..], &Y[0..], 1, -1, -1);

    println!("Alignment Score: {}", score);
    println!("max_pos: {}", max_pos);
}

// example 0
// let x = String::from("AGT");
// let y = String::from("ATCGT");

// example 1
// let x = String::from("CCTA");
// let y = String::from("ACCTTCCATACCAGTCA");

// example 2
// let x = String::from("GAAAAAAATAACCAGCATTTA");
// let y = String::from("ACCTTCCATACCAGTCAAGGGGGGAAAAAAACCCACAACAAACCAGCATTTAAACAAAAAATGGAGAAGTGATAGATATTTTTGCTGTGTGTGTTTGTAGCATAGAAACTGCCGCGCAGGTGAAGAAAATGAAGAACTCGAAAAGAAAAGTGTGGGGTTATACTACACTACGGGATGAGAGAGTACA");

// example 5
// static X: &str = "CCGGGTTTA";
// static Y: &str = "ACCTTCGGGCCAGTCATATTTCA";

// example 6 - de-strings
static X: &str = "AAATTAAAAAAAA";
static Y: &str = "AAAWAAAAAAAA";

// example BIG
// let x = String::from("ACCTCGAAAATTTCCGCGCGGGCTTTTAGCCGAGCTATGCAAAAAGAGGCATGCTACTAGCATCGTATATATTTTTTTAGACTAAAAAAGAGGCATGCTAGCATATATAAAAAAACATCGTATATATTTTTTATGACGATGCATGCATGCATATCGTATATATTTTTTTAAAAAATCGTAGCTAGCTAGCATCGAAAAAGAGGCATGCTAATCGTACGCTACATACGGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGCATGCTACCCCCCCCGGAAAAAGAGGCATGCTAGGGGCTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGGGGGAAAAAGAGGCATGCTAGGGGGATCGTATATATTTTTTTTTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAAAGAAAAAGAGGCATGCTATAAAATCGAAAAAGAGGCATGCTATATATATTTTTTAAAAAACCCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCTATCGTATATATTTTTTAAATTATATACGTGCTCGTCGGGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCTAAGATCGTATATATTTTTTACGATGCATGCATGCATTAAAAAATCGTAGCTAGCCTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGAAAGGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAAAAAGAGGCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGGCATGCTACCC");
// let y = String::from("CCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTTCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTTCAAAAAGAGGCATGCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTCTGGCATGCTATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCGAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGCATGCTACCCCCCCCGGAAAAAGAGGCAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTTGCTAGGGGCTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTATGCTAGGGAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGGGGGAAAAAGAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGGCATGCTAGGGGGATCGTATATATTTTTTTTTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAAGCATGCTACCCCCAAAGAGGCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTCAAAAAGAGGCATGCTAGGCAAAGAGGCATGAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCGGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTCAAAAAGAGGCATGCTAGGCATGCTACCCCCCCCGGAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAAAAGAGGCATGCTAGGGGCTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGGGGGAAAAAGAGGCATGCTAGGGGGATCGTATATATTTTTTTTTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCACGGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGCATGCTACCCCCCCCGGAAAAAGAGGCATGCTAGGGGCTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGGGGGAAAAAGAGGCATGCTAGGGGGATCGTATATATTTTTTTTTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAATAAAAACCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGCATGCTACCCCCCCCGGAAAAAGAGGCATGCTAGGGGCTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGGGGGAAAAAGAGGCATGCTAGGGGGATCGTATATATTTTTTTTTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAAATGCTACCCCCCCCGGAAAAAGAGGCATGCTAGGGGCTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATACAAAAAGAGGCATGCTCGGACGATGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCCAAAAAGAGGCATGCTCGGACGATGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCTATTTTACGGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGGGGGAAAAAGAGGCATGCTAGGGGGATCGTACGGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATATATTTTTTTTTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCAAAAAGAGGCATGCTACCCAAAAAGAGGCATGCTATAGCATCGTATATAGCTAGCATTAAAAAGAGGCATGCTAATAAAAAGAGGCATGCTAATCGTATATATTTTTTATATATGACTAGTCTAGTTTTTAACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTATTTGGGGGAAAGAGAGATCGTATATATTTTTTAGAGAAAACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCTTTATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATTTTTATCCCCCCCCAAAAAGAGGCATGCTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCCCCCCCCAAAAAGAGGCATGCCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGCATGCTACCCCCCCCGGAAAAAGAGGCATGCTAGGGGCTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGGGGGAAAAAGAGGCATACGGGGGGCATCCCCCCCTTTTTTTTAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATACTAGCATCGTATATATTTTTTTAATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCCAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATACCCCCCAAAAAGAGGCATGCGACTAGCATAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGGCTAGGGGGATCGTATATATTTTTTTTTATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCCCCCCCCAAAAAGAGGCATGCTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCACAAAAAGAGGCATGCTCGGACGATGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAACAAAAAGAGGCATGCTCGGACGATGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATACAAAAAGAGGCATGCTCGGACGATGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCTAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCTCGATCGTATATATTATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCCCCCCCCAAAAAGAGGCATGCTTTTATCTTTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATACGATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATAATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCCCCCCCCAAAAAGAGGCATGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATCAAAAAGAGGCATGCTCGGACGATGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTCAAAAAGAGGCATGCTCGGACGACAAAAAGAGGCATGCTCGGACGATGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCTGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGCATGCTACCCCCCCCGGAAAAAGAGGCATGCTAGGGGCTACATGCATTAAAAAATCGTAGCTAGCTAGCATCATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCCAAAAAGAGGCATGCTCGGACGATGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCCAAAAAGAGGCATGCTCGGACGATGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAACAAAAAGAGGCATGCTCGGACGATGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCCAAAAAGAGGCATGCTCGGACGATGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCGATCGTATATATTTTTTATCCCCCCCCAAAAAGAGGCATGCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGGGGGAAAAAGAGGCATGCTAGGGGGATCGTATATATTTTTTTTTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAAAAAAAAGAGGCATGCTAAGAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATAGGCATGCTAGTACATCGGGGGGGAAAAAATAGACGATGCATGCATGCATTATCGTATATATTTTTTAAAAAATCGTAGCTAGCTAGCATCGTATATATTTTTTTAGACTAGCATATCTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAATAAAAAAACATGACGATGCATGCTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGACGGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGCATCCCCCCCCTAGCTAGTAAAAAAAACAAAAAGAGGCATGCTCGGACGATGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCCAAAAAGAGGCATGCTCGGACGATGCATGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGCGGGGGCATCCCCCCCTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAACCCCCCCCCCCAAAAAGAGGCATGCTAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGCATCCCCCCCCTAGCTAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCAAATCGTAGCTAGCTAGCATCGTTTTTATCTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAAAAAAGAGGCATGCTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGACTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGCATGCTACCCCCCCCGGAAAAAGAGGCATGCTAGGGGCTACATGCATTAAAAAATCGTAGCTAGCTAGCATCGATCGTATATATTTTTTATCAAAAAGAGGCATGCTAGTACGGGGGGCATCCCCCCCCTAGCTAGTAAAAAAAAACCCCCCCCCCCAAAAAGAGGCATGCTACCCCCCCCCCCCCCCAAAAAGAGGCATGCTAGGGGGGGGGAAAAAGAGGCATGCTAGGGGGATCGTATATATTTTTTTTTTTTTTTTCTAGCATCGTATATATTTTTTTAGACTAGCATATATAAAAAAACATGACGATGCATGCATGCATTAAAAAGAGGCATGCTAAAAAAATCGTAGCTAGCTAGCATCGATAAAAAGAGGCATGCTACGTACAAAAAGAGGCATGCTAGGGGGGCATCCCCCCCCTAGCTAGTAAAATCGTATATATTTTTTAAAAAACCCCCCCCCCCCCCCCCCCCCCCCTTTTTTTTTTATCGTATATATTTTTTTTTTTTTAAAAAAAAAAAAGAGGCATGCTAAAAAAAAAAAAAAAAAAAAAAAAGCGGACGATGCATATCGTATATATTTTTTGCATGCATTAAAAAATCGTAGCTAGCTAGCATCGCGGGGCGCGCGCGCG");

/*

fn dna_to_bytes(seq: &str) -> Vec<u8> {
    seq.chars().map(|c| match c {
        'A' => 0,
        'C' => 1,
        'G' => 2,
        'T' => 3,
        _ => panic!("Invalid character in DNA sequence"),
    }).collect()
}

fn two_rows_alignment(seq1: &[u8], seq2: &[u8], match_score: i32, mismatch: i32, gap: i32) -> (i32, usize, usize) {
    let m = seq1.len();
    let n = seq2.len();

    // Inizializza la tabella DP con 2 righe
    let mut dp = vec![vec![0; n + 1], vec![0; n + 1]];

    // Inizializza il punteggio massimo e la sua posizione
    let mut max_score = 0;
    let mut max_i = 0;
    let mut max_j = 0;

    // Inizializza la prima riga
    for j in 1..=n {
        dp[0][j] = std::cmp::max(0, dp[0][j - 1] + gap);
    }

    // Riempie la tabella DP e traccia il punteggio massimo
    for i in 1..=m {
        dp[1][0] = std::cmp::max(0, dp[0][0] + gap);

        for j in 1..=n {
            let match_mismatch = dp[0][j - 1]
                + if seq1[i - 1] == seq2[j - 1] {
                    match_score
                } else {
                    mismatch
                };

            let delete = dp[0][j] + gap;
            let insert = dp[1][j - 1] + gap;

            dp[1][j] = std::cmp::max(match_mismatch, std::cmp::max(delete, std::cmp::max(insert, 0)));

            // Traccia il punteggio massimo e la sua posizione
            if dp[1][j] > max_score {
                max_score = dp[1][j];
                max_i = i;
                max_j = j;
            }
        }

        // Scambia le righe usando una variabile temporanea
        dp.swap(0, 1);
    }

    (max_score, max_i, max_j)
}

fn main() {
    let x = "...";
    let y = "...";

    // Convertiamo le stringhe di DNA in vettori di u8
    let x_bytes = dna_to_bytes(&x[1..]);
    let y_bytes = dna_to_bytes(&y[1..]);

    // Calcoliamo l'allineamento
    let (score, max_i, max_j) = two_rows_alignment(&y_bytes, &x_bytes, 1, -1, -1);

    println!("Alignment Score: {}", score);
    println!("max_i: {}", max_i);
    println!("max_j: {}", max_j);
}

*/
